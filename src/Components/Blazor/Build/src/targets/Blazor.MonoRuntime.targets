<Project>
  <PropertyGroup>
    <BlazorLinkOnBuild Condition="$(BlazorLinkOnBuild) == ''">true</BlazorLinkOnBuild>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Stop-gap until we can migrate Blazor.Mono package to use better naming convention -->
    <DotNetWebAssemblyBCLPath Condition="'$(DotNetWebAssemblyBCLPath)' == '' AND '$(MonoBaseClassLibraryPath)' != ''">$(MonoBaseClassLibraryPath)</DotNetWebAssemblyBCLPath>
    <DotNetWebAssemblyBCLFacadesPath Condition="'$(DotNetWebAssemblyBCLFacadesPath)' == '' AND '$(MonoBaseClassLibraryFacadesPath)' != ''">$(MonoBaseClassLibraryFacadesPath)</DotNetWebAssemblyBCLFacadesPath>
    <DotNetWebAssemblyRuntimePath Condition="'$(DotNetWebAssemblyRuntimePath)' == '' AND '$(MonoWasmRuntimePath)' != ''">$(MonoWasmRuntimePath)</DotNetWebAssemblyRuntimePath>
    <DotNetWebAssemblyFrameworkPath Condition="'$(DotNetWebAssemblyFrameworkPath)' == '' AND '$(MonoWasmFrameworkPath)' != ''">$(MonoWasmFrameworkPath)</DotNetWebAssemblyFrameworkPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DotNetWebAssemblyArtifactsRoot)' != ''">
    <!-- Compute paths given a path to DotNet WASM artifacts. This is meant to make it easy to test WASM builds -->
    <DotNetWebAssemblyBCLPath>$(DotNetWebAssemblyArtifactsRoot)\wasm-bcl\wasm\</DotNetWebAssemblyBCLPath>
    <DotNetWebAssemblyBCLFacadesPath>$(DotNetWebAssemblyBCLPath)\Facades\</DotNetWebAssemblyBCLFacadesPath>
    <DotNetWebAssemblyRuntimePath>$(DotNetWebAssemblyArtifactsRoot)\builds\debug\</DotNetWebAssemblyRuntimePath>
    <DotNetWebAssemblyFrameworkPath>$(DotNetWebAssemblyArtifactsRoot)\framework\</DotNetWebAssemblyFrameworkPath>
  </PropertyGroup>

  <Target
    Name="_BlazorCopyFilesToOutputDirectory"
    DependsOnTargets="PrepareBlazorOutputs"
    Inputs="@(BlazorOutputWithTargetPath)"
    Outputs="@(BlazorOutputWithTargetPath->'$(TargetDir)%(TargetOutputPath)')"
    AfterTargets="CopyFilesToOutputDirectory"
    Condition="'$(OutputType.ToLowerInvariant())'=='exe'">

    <!-- Copy the blazor output files  -->
    <Copy
      SourceFiles="@(BlazorOutputWithTargetPath)"
      DestinationFiles="@(BlazorOutputWithTargetPath->'$(TargetDir)%(TargetOutputPath)')"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
      Condition="'@(BlazorOutputWithTargetPath)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
    </Copy>

    <ItemGroup>
      <FileWrites Include="@(BlazorOutputWithTargetPath->'$(TargetDir)%(TargetOutputPath)')" />
    </ItemGroup>

    <ItemGroup>
      <_BlazorStatisticsOutput Include="@(BlazorOutputWithTargetPath->'%(TargetOutputPath)')" />
    </ItemGroup>

    <Message Importance="high" Text="$(TargetName) (Blazor output) -> $(TargetDir)dist" />
  </Target>

  <Target
    Name="PrepareBlazorOutputs"
    DependsOnTargets="_ResolveBlazorInputs;_ResolveBlazorOutputs;_GenerateBlazorBootJson">

    <ItemGroup>
      <MonoWasmFile Include="$(DotNetWebAssemblyRuntimePath)*" />
      <BlazorJSFile Include="$(BlazorJSPath)" />
      <BlazorJSFile Include="$(BlazorJSMapPath)" Condition="Exists('$(BlazorJSMapPath)')" />

      <BlazorOutputWithTargetPath Include="@(MonoWasmFile)">
        <TargetOutputPath>$(BlazorRuntimeWasmOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
      <BlazorOutputWithTargetPath Include="@(BlazorJSFile)">
        <TargetOutputPath>$(BaseBlazorRuntimeOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
    </ItemGroup>

    <ItemGroup Label="Static content supplied by NuGet packages">
      <_BlazorPackageContentOutput Include="@(BlazorPackageContentFile)" Condition="%(SourcePackage) != ''">
        <TargetOutputPath>$(BaseBlazorPackageContentOutputPath)%(SourcePackage)\%(RecursiveDir)\%(Filename)%(Extension)</TargetOutputPath>
      </_BlazorPackageContentOutput>
      <BlazorOutputWithTargetPath Include="@(_BlazorPackageContentOutput)" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveBlazorInputs">
    <PropertyGroup>
      <!-- /obj/<<configuration>>/<<targetframework>>/blazor -->
      <BlazorIntermediateOutputPath>$(IntermediateOutputPath)blazor\</BlazorIntermediateOutputPath>

      <!-- /obj/<<configuration>>/<<targetframework>>/blazor/linker.descriptor.xml -->
      <GeneratedBlazorLinkerDescriptor>$(BlazorIntermediateOutputPath)linker.descriptor.xml</GeneratedBlazorLinkerDescriptor>

      <!-- /obj/<<configuration>>/<<targetframework>>/blazor/linker/ -->
      <BlazorIntermediateLinkerOutputPath>$(BlazorIntermediateOutputPath)linker/</BlazorIntermediateLinkerOutputPath>

      <!-- /obj/<<configuration>>/<<targetframework>>/blazor/blazor.boot.json -->
      <BlazorBootJsonIntermediateOutputPath>$(BlazorIntermediateOutputPath)$(BlazorBootJsonName)</BlazorBootJsonIntermediateOutputPath>

      <_BlazorLinkerOutputCache>$(BlazorIntermediateOutputPath)linker.output</_BlazorLinkerOutputCache>

      <_BlazorApplicationAssembliesCacheFile>$(BlazorIntermediateOutputPath)unlinked.output</_BlazorApplicationAssembliesCacheFile>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorDependencyInput Include="@(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll')->'%(FullPath)')" />

      <_WebAssemblyBCLFolder Include="
        $(DotNetWebAssemblyBCLPath);
        $(DotNetWebAssemblyBCLFacadesPath);
        $(DotNetWebAssemblyFrameworkPath)" />

      <_WebAssemblyBCLAssembly Include="%(_WebAssemblyBCLFolder.Identity)*.dll" />
    </ItemGroup>

    <MakeDir Directories="$(BlazorIntermediateOutputPath)" />
  </Target>

  <Target Name="_ResolveBlazorOutputs" DependsOnTargets="_ResolveBlazorOutputsWhenLinked;_ResolveBlazorOutputsWhenNotLinked">
    <Error
      Message="Unrecongnized value for BlazorLinkOnBuild: '$(BlazorLinkOnBuild)'. Valid values are 'true' or 'false'."
      Condition="'$(BlazorLinkOnBuild)' != 'true' AND '$(BlazorLinkOnBuild)' != 'false'" />
  </Target>

  <!--
  Linker enabled part of the pipeline:

  * If there are no descriptors defined, generate a new linker descriptor.
  * Invoke the linker and write linked files to a well-known directory.
  * Collect the outputs of the linker.
  -->

  <Target
    Name="_ResolveBlazorOutputsWhenLinked"
    Condition="'$(BlazorLinkOnBuild)' == 'true'"
    DependsOnTargets="_GenerateBlazorLinkerDescriptor;_LinkBlazorApplication">

    <!-- _BlazorLinkerOutputCache records files linked during the last incremental build of the target. Read the contents and assign linked files to be copied to the output. -->
    <ReadLinesFromFile File="$(_BlazorLinkerOutputCache)">
      <Output TaskParameter="Lines" ItemName="_BlazorLinkedFile"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <BlazorOutputWithTargetPath Include="%(_BlazorLinkedFile.Identity)">
        <TargetOutputPath>$(BlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="BlazorCreateRootDescriptorFile" AssemblyFile="$(BlazorTasksPath)" />
  <Target Name="_GenerateBlazorLinkerDescriptor"
          Inputs="@(IntermediateAssembly)"
          Outputs="$(GeneratedBlazorLinkerDescriptor)"
          Condition="'@(BlazorLinkerDescriptor)' == ''">

    <!-- Generate linker descriptors if the project doesn't explicitly provide one. -->

    <BlazorCreateRootDescriptorFile
      AssemblyNames="@(IntermediateAssembly->'%(Filename)')"
      RootDescriptorFilePath="$(GeneratedBlazorLinkerDescriptor)" />

    <ItemGroup>
      <FileWrites Include="$(GeneratedBlazorLinkerDescriptor)" />
      <BlazorLinkerDescriptor Include="$(GeneratedBlazorLinkerDescriptor)" />
      <BlazorLinkerDescriptor Include="$(_BlazorBuiltInBclLinkerDescriptor)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="BlazorILLink" AssemblyFile="$(BlazorTasksPath)" />

  <Target
      Name="_LinkBlazorApplication"
      Inputs="$(ProjectAssetsFile);
              @(IntermediateAssembly);
              @(_BlazorDependencyInput);
              @(BlazorLinkerDescriptor);
              $(MSBuildAllProjects)"
      Outputs="$(_BlazorLinkerOutputCache)">

    <ItemGroup>
      <_BlazorDependencyAssembly Include="@(_BlazorDependencyInput)" IsLinkable="$([System.String]::Copy('%(FileName)').StartsWith('System.'))" />

      <_BlazorAssemblyToLink Include="@(_WebAssemblyBCLAssembly)" />
      <_BlazorAssemblyToLink Include="@(_BlazorDependencyAssembly)" Condition="'%(_BlazorDependencyAssembly.IsLinkable)' == 'true'" />

      <_BlazorLinkerRoot Include="@(IntermediateAssembly)" />
      <_BlazorLinkerRoot Include="@(_BlazorDependencyAssembly)" Condition="'%(_BlazorDependencyAssembly.IsLinkable)' != 'true'" />
    </ItemGroup>

    <PropertyGroup>
      <_BlazorLinkerAdditionalOptions>-l $(MonoLinkerI18NAssemblies) $(AdditionalMonoLinkerOptions)</_BlazorLinkerAdditionalOptions>
    </PropertyGroup>

    <ItemGroup>
      <_OldLinkedFile Include="$(BlazorIntermediateLinkerOutputPath)*.dll" />
      <_OldLinkedFile Include="$(BlazorIntermediateLinkerOutputPath)*.pdb" />
    </ItemGroup>

    <Delete Files="@(_OldLinkedFile)" />

    <!--
      When running from Desktop MSBuild, DOTNET_HOST_PATH is not set.
      In this case, explicitly specify the path to the dotnet host.
    -->
    <PropertyGroup Condition=" '$(DOTNET_HOST_PATH)' == '' ">
      <_DotNetHostDirectory>$(NetCoreRoot)</_DotNetHostDirectory>
      <_DotNetHostFileName>dotnet</_DotNetHostFileName>
      <_DotNetHostFileName Condition=" '$(OS)' == 'Windows_NT' ">dotnet.exe</_DotNetHostFileName>
    </PropertyGroup>

    <BlazorILLink
        ILLinkPath="$(MonoLinkerPath)"
        AssemblyPaths="@(_BlazorAssemblyToLink)"
        RootAssemblyNames="@(_BlazorLinkerRoot)"
        RootDescriptorFiles="@(BlazorLinkerDescriptor)"
        OutputDirectory="$(BlazorIntermediateLinkerOutputPath)"
        ExtraArgs="$(_BlazorLinkerAdditionalOptions)"
        ToolExe="$(_DotNetHostFileName)"
        ToolPath="$(_DotNetHostDirectory)" />

    <ItemGroup>
      <_LinkerResult Include="$(BlazorIntermediateLinkerOutputPath)*.dll" />
      <_LinkerResult Include="$(BlazorIntermediateLinkerOutputPath)*.pdb" Condition="'$(BlazorEnableDebugging)' == 'true'" />
    </ItemGroup>

    <WriteLinesToFile File="$(_BlazorLinkerOutputCache)" Lines="@(_LinkerResult)" Overwrite="true" />
  </Target>


  <UsingTask TaskName="ResolveBlazorRuntimeDependencies" AssemblyFile="$(BlazorTasksPath)" />
  <Target
    Name="_ResolveBlazorOutputsWhenNotLinked"
    DependsOnTargets="_ResolveBlazorRuntimeDependencies"
    Condition="'$(BlazorLinkOnBuild)' != 'true'">

    <ReadLinesFromFile File="$(_BlazorApplicationAssembliesCacheFile)" Condition="'@(_BlazorResolvedRuntimeDependencies->Count())' == '0'">
      <Output TaskParameter="Lines" ItemName="_BlazorResolvedRuntimeDependencies"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <BlazorOutputWithTargetPath Include="@(_BlazorResolvedRuntimeDependencies)">
        <TargetOutputPath>$(BlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
      </BlazorOutputWithTargetPath>
    </ItemGroup>
  </Target>

  <Target
    Name="_ResolveBlazorRuntimeDependencies"
    Inputs="$(ProjectAssetsFile);
            @(IntermediateAssembly);
            @(_BlazorDependencyInput)"
    Outputs="$(_BlazorApplicationAssembliesCacheFile)">

    <!--
    At this point we have decided not to run the linker and instead to just copy the assemblies
    from the BCL referenced by the app the nuget package into the _framework/_bin folder.
    The only thing we need to do here is collect the list of items that will go into _framework/_bin.
    -->
    <ResolveBlazorRuntimeDependencies
      EntryPoint="@(IntermediateAssembly)"
      ApplicationDependencies="@(_BlazorDependencyInput)"
      WebAssemblyBCLAssemblies="@(_WebAssemblyBCLAssembly)">

      <Output TaskParameter="Dependencies" ItemName="_BlazorResolvedRuntimeDependencies" />
    </ResolveBlazorRuntimeDependencies>

    <ItemGroup>
      <FileWrites Include="$(_BlazorApplicationAssembliesCacheFile)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="GenerateBlazorBootJson" AssemblyFile="$(BlazorTasksPath)" />

  <Target
    Name="_GenerateBlazorBootJson"
    Inputs="@(BlazorOutputWithTargetPath)"
    Outputs="$(BlazorBootJsonIntermediateOutputPath)">
    <ItemGroup>
      <_AppReferences Include="@(BlazorOutputWithTargetPath->WithMetadataValue('Extension','.dll'))" />
      <_AppReferences Include="@(BlazorOutputWithTargetPath->WithMetadataValue('Extension','.pdb'))" Condition="'$(BlazorEnableDebugging)' == 'true'" />
    </ItemGroup>

    <GenerateBlazorBootJson
      AssemblyPath="@(IntermediateAssembly)"
      References="@(_AppReferences)"
      LinkerEnabled="$(BlazorLinkOnBuild)"
      OutputPath="$(BlazorBootJsonIntermediateOutputPath)" />

    <ItemGroup>
      <BlazorOutputWithTargetPath Include="$(BlazorBootJsonIntermediateOutputPath)" TargetOutputPath="$(BaseBlazorRuntimeOutputPath)$(BlazorBootJsonName)" />
      <FileWrites Include="$(BlazorBootJsonIntermediateOutputPath)" />
    </ItemGroup>
  </Target>

</Project>
